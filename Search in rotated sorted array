class Solution {
public:

    int findpivot(vector<int> &nums)
    {
        int s=0,e=nums.size()-1;

        while(s<e)
        {
            int mid=s+(e-s)/2;

            if(nums[mid] >= nums[0])
            s=mid+1;

            else
            e=mid;
        }

        return s;
    }



    int binarysearch(vector<int> &nums,int s,int e,int target)
    {
        
        while(s<=e)
        {
            int mid=s+(e-s)/2;

            if(nums[mid]==target)
            return mid;

            else if(target > nums[mid])
            s=mid+1;

            else if(target  < nums[mid])
            e=mid-1;

        }

        return -1;
    }




    int search(vector<int>& nums, int target) {


        if(nums.size()==1 && nums[0]==target)
        return 0;

    

        int ans=-1;

        int pivot=findpivot(nums);

        if(target >= nums[pivot] && target <= nums[nums.size()-1])
        {
            ans=binarysearch(nums,pivot,nums.size()-1,target);
        }

        else
        {
            ans=binarysearch(nums,0,pivot-1,target);
        }


        return ans;
        
    }
};
